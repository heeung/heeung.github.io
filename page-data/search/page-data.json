{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"상황 : 회원가입 페이지 구현 중 TextField에 관한 UX적인 부분의 구현이 필요했다. 📌 구현 동작   📌 화면 터치로 TextField focus 빼기 처음에 할 것은 Modifier의 확장함수를 통해 전체화면의 터치 이벤트를 감지하여 clearFocus()하는 동작을 만들어 주는 것. focusManager가 기능의 90프로를 차지하기 때문에 …","fields":{"slug":"/android-compose-textfield-focus/"},"frontmatter":{"date":"September 18, 2023","title":"Android Compose Textfield 포커스를 처리해보자","tags":["android","compose"]},"rawMarkdownBody":"\n> 상황 : 회원가입 페이지 구현 중 TextField에 관한 UX적인 부분의 구현이 필요했다.\n> \n\n## 📌 구현 동작\n<img src=\"https://velog.velcdn.com/images/heeung/post/f6be68e7-7827-4b4a-93f6-2457a76e6c3e/image.gif\" width=\"250\"/> | <img src=\"https://velog.velcdn.com/images/heeung/post/a61dece0-680e-4bf6-8f21-cd025a575176/image.gif\" width=\"250\"/>\n---|---\n\n<br />\n\n## 📌 화면 터치로 TextField focus 빼기\n\n- 처음에 할 것은 Modifier의 확장함수를 통해 전체화면의 터치 이벤트를 감지하여 clearFocus()하는 동작을 만들어 주는 것.\n\n```kotlin\nfun Modifier.addFocusCleaner(focusManager: FocusManager, doOnClear: () -> Unit = {}): Modifier {\n    return this.pointerInput(Unit) {\n        detectTapGestures(onTap = {\n            doOnClear()\n            focusManager.clearFocus()\n        })\n    }\n}\n```\n\n- focusManager가 기능의 90프로를 차지하기 때문에 핵심이라고 생각했습니다.\n- 사용할 곳에서는 →\n\n```kotlin\nval focusManager = LocalFocusManager.current\n```\n\n- 포커스 매니저를 불러옵니다.\n\n```kotlin\n@Composable\nfun MainContent() {\n    Scaffold(\n        modifier = Modifier\n            .fillMaxSize()\n            .addFocusCleaner(focusManager)\n    ) {\n\n        ...\n    \n    }\n}\n```\n\n- 사용할 컴포저블 함수의 최상위 뷰에서 .addFocusCleaner를 Modifier에 추가해주면 그 아래 TextField들의 포커스 관리가 됩니다.\n\n<br />\n\n## 📌 안드로이드 키보드 Enter키 누르면 다음 TextField 포커싱 하기\n\n- TextField를 `singleLine = true`로 만들면 키보드의 엔터키가 “완료”키로 바뀌어있는것을 확인할 수 있습니다.\n- 완료키로 바뀌었기때문에 `KeyboardActions`의 `onDone`으로 구현이 가능하다.\n\n```kotlin\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MainTextField(\n    text: String = \"\",\n    onValueChange: (String) -> Unit,\n    focusManager: FocusManager\n) {\n    OutlinedTextField(\n        modifier = Modifier\n            .fillMaxWidth(),\n        label = { Text(\"입력\") },\n        value = text,\n        onValueChange = onValueChange,\n        singleLine = true,\n        keyboardActions = KeyboardActions(onDone = {\n            focusManager.moveFocus(FocusDirection.Next)\n        })\n    )\n}\n```\n\n<br />\n\n## 🔎 전체 코드\n\n```kotlin\npackage test.composestarter\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.gestures.detectTapGestures\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.focus.FocusDirection\nimport androidx.compose.ui.focus.FocusManager\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.platform.LocalFocusManager\nimport androidx.compose.ui.unit.dp\nimport test.composestarter.ui.theme.ComposeStarterTheme\nimport test.composestarter.ui.theme.WhiteColor\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            ComposeStarterTheme {\n                MainScreen()\n            }\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MainScreen() {\n    val focusManager = LocalFocusManager.current\n\n    Scaffold(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(horizontal = 16.dp)\n            .background(WhiteColor)\n            .addFocusCleaner(focusManager),\n    ) { paddingValues ->\n        paddingValues\n        var text1 by remember { mutableStateOf(\"\") }\n        var text2 by remember { mutableStateOf(\"\") }\n        var text3 by remember { mutableStateOf(\"\") }\n\n        Column(\n\n        ) {\n            MainTextField(\n                text = text1,\n                onValueChange = {\n                    text1 = it\n                },\n                focusManager = focusManager\n            )\n            MainTextField(\n                text = text2,\n                onValueChange = {\n                    text2 = it\n                },\n                focusManager = focusManager\n            )\n            MainTextField(\n                text = text3,\n                onValueChange = {\n                    text3 = it\n                },\n                focusManager = focusManager\n            )\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MainTextField(\n    text: String = \"\",\n    onValueChange: (String) -> Unit,\n    focusManager: FocusManager\n) {\n    OutlinedTextField(\n        modifier = Modifier\n            .fillMaxWidth(),\n        label = { Text(\"입력\") },\n        value = text,\n        onValueChange = onValueChange,\n        singleLine = true,\n        keyboardActions = KeyboardActions(onDone = {\n            focusManager.moveFocus(FocusDirection.Next)\n        })\n    )\n}\n\nfun Modifier.addFocusCleaner(focusManager: FocusManager, doOnClear: () -> Unit = {}): Modifier {\n    return this.pointerInput(Unit) {\n        detectTapGestures(onTap = {\n            doOnClear()\n            focusManager.clearFocus()\n        })\n    }\n}\n```"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}
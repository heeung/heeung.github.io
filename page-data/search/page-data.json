{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"상황 : 회원가입 페이지 구현 중 TextField에 관한 UX적인 부분의 구현이 필요했다. 📌 구현 동작   📌 화면 터치로 TextField focus 빼기 처음에 할 것은 Modifier의 확장함수를 통해 전체화면의 터치 이벤트를 감지하여 clearFocus()하는 동작을 만들어 주는 것. focusManager가 기능의 90프로를 차지하기 때문에 …","fields":{"slug":"/Android-Compose-Textfield-포커스를-처리해보자/"},"frontmatter":{"date":"September 18, 2023","title":"Android Compose Textfield 포커스를 처리해보자","tags":["android","compose"]},"rawMarkdownBody":"\r\n> 상황 : 회원가입 페이지 구현 중 TextField에 관한 UX적인 부분의 구현이 필요했다.\r\n> \r\n\r\n## 📌 구현 동작\r\n<img src=\"https://velog.velcdn.com/images/heeung/post/f6be68e7-7827-4b4a-93f6-2457a76e6c3e/image.gif\" width=\"250\"/> | <img src=\"https://velog.velcdn.com/images/heeung/post/a61dece0-680e-4bf6-8f21-cd025a575176/image.gif\" width=\"250\"/>\r\n---|---\r\n\r\n<br />\r\n\r\n## 📌 화면 터치로 TextField focus 빼기\r\n\r\n- 처음에 할 것은 Modifier의 확장함수를 통해 전체화면의 터치 이벤트를 감지하여 clearFocus()하는 동작을 만들어 주는 것.\r\n\r\n```kotlin\r\nfun Modifier.addFocusCleaner(focusManager: FocusManager, doOnClear: () -> Unit = {}): Modifier {\r\n    return this.pointerInput(Unit) {\r\n        detectTapGestures(onTap = {\r\n            doOnClear()\r\n            focusManager.clearFocus()\r\n        })\r\n    }\r\n}\r\n```\r\n\r\n- focusManager가 기능의 90프로를 차지하기 때문에 핵심이라고 생각했습니다.\r\n- 사용할 곳에서는 →\r\n\r\n```kotlin\r\nval focusManager = LocalFocusManager.current\r\n```\r\n\r\n- 포커스 매니저를 불러옵니다.\r\n\r\n```kotlin\r\n@Composable\r\nfun MainContent(\r\n\r\n) {\r\n\t\tScaffold(\r\n\t\t        modifier = Modifier\r\n\t\t            .fillMaxSize()\r\n\t\t            .addFocusCleaner(focusManager)\r\n\t\t) {\r\n\r\n\t\t\t\t...\r\n\t\t\r\n\t\t}\r\n}\r\n```\r\n\r\n- 사용할 컴포저블 함수의 최상위 뷰에서 .addFocusCleaner를 Modifier에 추가해주면 그 아래 TextField들의 포커스 관리가 됩니다.\r\n\r\n<br />\r\n\r\n## 📌 안드로이드 키보드 Enter키 누르면 다음 TextField 포커싱 하기\r\n\r\n- TextField를 `singleLine = true`로 만들면 키보드의 엔터키가 “완료”키로 바뀌어있는것을 확인할 수 있습니다.\r\n- 완료키로 바뀌었기때문에 `KeyboardActions`의 `onDone`으로 구현이 가능하다.\r\n\r\n```kotlin\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun MainTextField(\r\n    text: String = \"\",\r\n    onValueChange: (String) -> Unit,\r\n    focusManager: FocusManager\r\n) {\r\n    OutlinedTextField(\r\n        modifier = Modifier\r\n            .fillMaxWidth(),\r\n        label = { Text(\"입력\") },\r\n        value = text,\r\n        onValueChange = onValueChange,\r\n        singleLine = true,\r\n        keyboardActions = KeyboardActions(onDone = {\r\n            focusManager.moveFocus(FocusDirection.Next)\r\n        })\r\n    )\r\n}\r\n```\r\n\r\n<br />\r\n\r\n## 🔎 전체 코드\r\n\r\n```kotlin\r\npackage test.composestarter\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.gestures.detectTapGestures\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.ExperimentalComposeUiApi\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusDirection\r\nimport androidx.compose.ui.focus.FocusManager\r\nimport androidx.compose.ui.input.pointer.pointerInput\r\nimport androidx.compose.ui.platform.LocalFocusManager\r\nimport androidx.compose.ui.unit.dp\r\nimport test.composestarter.ui.theme.ComposeStarterTheme\r\nimport test.composestarter.ui.theme.WhiteColor\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            ComposeStarterTheme {\r\n                MainScreen()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun MainScreen() {\r\n    val focusManager = LocalFocusManager.current\r\n\r\n    Scaffold(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(horizontal = 16.dp)\r\n            .background(WhiteColor)\r\n            .addFocusCleaner(focusManager),\r\n    ) { paddingValues ->\r\n        paddingValues\r\n        var text1 by remember { mutableStateOf(\"\") }\r\n        var text2 by remember { mutableStateOf(\"\") }\r\n        var text3 by remember { mutableStateOf(\"\") }\r\n\r\n        Column(\r\n\r\n        ) {\r\n            MainTextField(\r\n                text = text1,\r\n                onValueChange = {\r\n                    text1 = it\r\n                },\r\n                focusManager = focusManager\r\n            )\r\n            MainTextField(\r\n                text = text2,\r\n                onValueChange = {\r\n                    text2 = it\r\n                },\r\n                focusManager = focusManager\r\n            )\r\n            MainTextField(\r\n                text = text3,\r\n                onValueChange = {\r\n                    text3 = it\r\n                },\r\n                focusManager = focusManager\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun MainTextField(\r\n    text: String = \"\",\r\n    onValueChange: (String) -> Unit,\r\n    focusManager: FocusManager\r\n) {\r\n    OutlinedTextField(\r\n        modifier = Modifier\r\n            .fillMaxWidth(),\r\n        label = { Text(\"입력\") },\r\n        value = text,\r\n        onValueChange = onValueChange,\r\n        singleLine = true,\r\n        keyboardActions = KeyboardActions(onDone = {\r\n            focusManager.moveFocus(FocusDirection.Next)\r\n        })\r\n    )\r\n}\r\n\r\nfun Modifier.addFocusCleaner(focusManager: FocusManager, doOnClear: () -> Unit = {}): Modifier {\r\n    return this.pointerInput(Unit) {\r\n        detectTapGestures(onTap = {\r\n            doOnClear()\r\n            focusManager.clearFocus()\r\n        })\r\n    }\r\n}\r\n```"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}